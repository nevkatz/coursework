 /*
 
 
    for (int pn = 0; pn < PAGENUMBER(MEMSIZE_PHYSICAL); ++pn)
    {
           if (pageinfo[pn].owner == j)
           {
             pageinfo[pn].owner = 0;
             pageinfo[pn].refcount = 0;
           }
    }
                
DURING READING PERIOD: Finish Step 7. 
mark a process as free and free all of its memory. 
free data,
free heap,
free stack pages,
free pages used for its page directory and page table pages.*/
 
  if (processes[pageinfo[pn].owner].p_state == P_FREE)
            {
              log_printf("process with referenced pages is FREE!\n");
              log_printf("index in pageinfo: %d\n", pn);
              log_printf("owner: %d\n", pageinfo[pn].owner);
              log_printf("refcount: %d\n", pageinfo[pn].refcount);
            }
 /*x86_pageentry_t entry = L1_page->entry[0];
                 uintptr_t L2_addr = PTE_ADDR(entry);
                 
                   x86_pagetable* L2_page = (x86_pagetable*) L2_addr;
                 
                   int pn2 = PAGENUMBER(L2_addr);
                   pageinfo[pn2].owner = 0;
                   pageinfo[pn2].refcount = 0;
                
                   memset (L2_page, 0, PAGESIZE);*/
